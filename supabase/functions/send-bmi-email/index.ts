import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface BMIEmailData {
  to: string;
  name: string;
  bmi: number;
  category: string;
  height: number;
  weight: number;
  heightUnit: string;
  weightUnit: string;
  age: number;
  gender: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { to, name, bmi, category, height, weight, heightUnit, weightUnit, age, gender }: BMIEmailData = await req.json()

    // Validate required fields
    if (!to || !name || !bmi || !category) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Get Resend API key from environment
    const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')
    if (!RESEND_API_KEY) {
      return new Response(
        JSON.stringify({ error: 'Resend API key not configured' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Create email HTML content
    const emailHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Your BMI Results</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .bmi-result { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center; }
          .bmi-value { font-size: 48px; font-weight: bold; color: #667eea; margin: 10px 0; }
          .category { font-size: 24px; font-weight: bold; margin: 10px 0; }
          .details { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }
          .detail-row { display: flex; justify-content: space-between; margin: 10px 0; padding: 10px 0; border-bottom: 1px solid #eee; }
          .detail-label { font-weight: bold; color: #666; }
          .detail-value { color: #333; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
          .category-normal { color: #28a745; }
          .category-overweight { color: #ffc107; }
          .category-obese { color: #dc3545; }
          .category-underweight { color: #17a2b8; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>Your BMI Results</h1>
            <p>Hello ${name}, here are your personalized BMI results</p>
          </div>
          
          <div class="content">
            <div class="bmi-result">
              <h2>Your BMI Score</h2>
              <div class="bmi-value">${bmi.toFixed(1)}</div>
              <div class="category category-${category.toLowerCase().replace(' ', '-')}">${category}</div>
            </div>
            
            <div class="details">
              <h3>Your Details</h3>
              <div class="detail-row">
                <span class="detail-label">Name:</span>
                <span class="detail-value">${name}</span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Age:</span>
                <span class="detail-value">${age} years</span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Gender:</span>
                <span class="detail-value">${gender}</span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Height:</span>
                <span class="detail-value">${height} ${heightUnit}</span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Weight:</span>
                <span class="detail-value">${weight} ${weightUnit}</span>
              </div>
            </div>
            
            <div class="footer">
              <p>This BMI calculation is for informational purposes only. Please consult with a healthcare provider for personalized health guidance.</p>
              <p>Generated by BMI Calculator App</p>
            </div>
          </div>
        </div>
      </body>
      </html>
    `

    // Send email using Resend
    const response = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        from: 'no-reply@bullappex.com',
        to: [to],
        subject: `Your BMI Results - ${name}`,
        html: emailHtml,
      }),
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error('Resend API error:', errorData)
      return new Response(
        JSON.stringify({ error: 'Failed to send email', details: errorData }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    const result = await response.json()
    
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Email sent successfully',
        emailId: result.id 
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Edge function error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error', details: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
